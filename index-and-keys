-- BUSCANDO CAMPOS DAS CHAVES PRIMARIAS
  select kcu.table_schema,
         kcu.table_name,
         tco.constraint_name,
         kcu.ordinal_position as position,
         kcu.column_name as key_column
  from information_schema.table_constraints tco
  join information_schema.key_column_usage kcu 
       on kcu.constraint_name = tco.constraint_name
       and kcu.constraint_schema = tco.constraint_schema
       and kcu.constraint_name = tco.constraint_name
  where tco.constraint_type = 'PRIMARY KEY'
  order by kcu.table_schema,
           kcu.table_name,
           position;

-- INDICES INVALIDOS
SELECT *
FROM pg_class, pg_index
WHERE pg_index.indisvalid = false
  AND pg_index.indexrelid = pg_class.oid;

-- TAMANHOS DOS INDICES
  SELECT
      pg_class.relname,
      pg_size_pretty(pg_class.reltuples::bigint)            AS rows_in_bytes,
      pg_class.reltuples                                    AS num_rows,
      pg_index.indisvalid                                   as is_valid, 
      COUNT(*)                                              AS total_indexes,
      COUNT(*) FILTER ( WHERE indisunique)                  AS unique_indexes,
      COUNT(*) FILTER ( WHERE indnatts = 1 )                AS single_column_indexes,
      COUNT(*) FILTER ( WHERE indnatts IS DISTINCT FROM 1 ) AS multi_column_indexes
  FROM
      pg_namespace
      LEFT JOIN pg_class ON pg_namespace.oid = pg_class.relnamespace
      LEFT JOIN pg_index ON pg_class.oid = pg_index.indrelid
  WHERE
      pg_namespace.nspname = 'public' AND
      pg_class.relkind = 'r'
  GROUP BY pg_class.relname, pg_class.reltuples, pg_index.indisvalid
  ORDER BY pg_class.reltuples DESC;
  
-- INDICES DUPLICADOS
  SELECT pg_size_pretty(sum(pg_relation_size(idx))::bigint) as size,
         (array_agg(idx))[1] as idx1, (array_agg(idx))[2] as idx2,
         (array_agg(idx))[3] as idx3, (array_agg(idx))[4] as idx4
  FROM (
      SELECT indexrelid::regclass as idx, (indrelid::text ||E'\n'|| indclass::text ||E'\n'|| indkey::text ||E'\n'||
                                           coalesce(indexprs::text,'')||E'\n' || coalesce(indpred::text,'')) as key
      FROM pg_index) sub
  GROUP BY key HAVING count(*)>1
  ORDER BY sum(pg_relation_size(idx)) DESC;

-- INDICES NUNCA USADOS
  SELECT s.schemaname,
         s.relname AS tablename,
         s.indexrelname AS indexname,
         pg_relation_size(s.indexrelid) AS index_size
  FROM pg_catalog.pg_stat_user_indexes s
     JOIN pg_catalog.pg_index i ON s.indexrelid = i.indexrelid
  WHERE s.idx_scan = 0      -- has never been scanned
    AND 0 <>ALL (i.indkey)  -- no index column is an expression
    AND NOT i.indisunique   -- is not a UNIQUE index
    AND NOT EXISTS          -- does not enforce a constraint
           (SELECT 1 FROM pg_catalog.pg_constraint c
            WHERE c.conindid = s.indexrelid)
  ORDER BY pg_relation_size(s.indexrelid) DESC;

--MELHORES INDICES PARA CADA TIPO CAMPO
  SELECT amname,
         opfname
  FROM   pg_opfamily,
         pg_am
  WHERE  opfmethod = pg_am.oid
  AND    amname = 'btree';





