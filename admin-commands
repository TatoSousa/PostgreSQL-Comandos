-- UPTIME DATABASE
    SELECT date_trunc('second', current_timestamp - pg_postmaster_start_time()) AS uptime;

-- ATIVIDADES NO BANCO DE DADOS
    select datname,
        pid,
        usename,
        backend_start ,
        query_start ,
        state_change,
        application_name ,
        client_addr ,
        state,
        query
    from pg_stat_activity
    order by state_change asc;

-- ATIVIDADES RESUMIDAS P/APPLICATION NAME E STATE (TOP 10)
    WITH states AS (
    SELECT  application_name ,
            min(state_change)::timestamp(0) as state_change_min,
            max(state_change)::timestamp(0) as state_change_max,
          COUNT(*) AS total,
        COUNT(state) FILTER (WHERE state = 'idle') AS idle,
        COUNT(state) FILTER (WHERE state = 'active') AS active,
        COUNT(state) FILTER (WHERE state = 'idle in transaction') AS idle_in_transaction,
        COUNT(state) FILTER (WHERE state = 'idle in transaction (aborted)') AS idle_in_transaction_aborted,
        COUNT(state) FILTER (WHERE state NOT IN ('idle','active','idle in transaction','idle in transaction (aborted)')) AS another_state
    from pg_stat_activity
    group by application_name
    order by idle desc
    )
    SELECT 'TOTAL' AS application_name,
                    SUM(total) AS total, MIN(state_change_min) state_change_min, MAX(state_change_max) state_change_max,
                    SUM(idle) idle, SUM(active) active, SUM(idle_in_transaction) idle_in_transaction, SUM(idle_in_transaction_aborted) idle_in_transaction_aborted,
            SUM(another_state) another_state
            FROM states
    UNION
    SELECT application_name, total, state_change_min, state_change_max, idle, active, idle_in_transaction, idle_in_transaction_aborted, another_state FROM states
    ORDER BY 5 desc 
    LIMIT 11;

-- BLOQUEIOS ATUAIS
    SELECT blocked_locks.pid AS blocked_pid,
        blocked_activity.usename AS blocked_user,
        blocking_locks.pid AS blocking_pid,
        blocking_activity.usename AS blocking_user,
        blocked_activity.query AS blocked_statement,
        blocking_activity.query AS current_statement_in_blocking_process,
        blocked_activity.application_name AS blocked_application,
        blocking_activity.application_name AS blocking_application
    FROM pg_catalog.pg_locks blocked_locks
    JOIN pg_catalog.pg_stat_activity blocked_activity ON blocked_activity.pid = blocked_locks.pid
    JOIN pg_catalog.pg_locks blocking_locks
              ON blocking_locks.locktype = blocked_locks.locktype
                AND blocking_locks.DATABASE IS NOT DISTINCT FROM blocked_locks.DATABASE
                AND blocking_locks.relation IS NOT DISTINCT FROM blocked_locks.relation
                AND blocking_locks.page IS NOT DISTINCT FROM blocked_locks.page
                AND blocking_locks.tuple IS NOT DISTINCT FROM blocked_locks.tuple
                AND blocking_locks.virtualxid IS NOT DISTINCT FROM blocked_locks.virtualxid
                AND blocking_locks.transactionid IS NOT DISTINCT FROM blocked_locks.transactionid
                AND blocking_locks.classid IS NOT DISTINCT FROM blocked_locks.classid
                AND blocking_locks.objid IS NOT DISTINCT FROM blocked_locks.objid
                AND blocking_locks.objsubid IS NOT DISTINCT FROM blocked_locks.objsubid
                AND blocking_locks.pid != blocked_locks.pid
    JOIN pg_catalog.pg_stat_activity blocking_activity ON blocking_activity.pid = blocking_locks.pid
    WHERE NOT blocked_locks.GRANTED;

-- AUTOVACCUM
    select datname,
      pid,
      usename,
      application_name ,
      client_addr ,
      wait_event_type ,
      wait_event ,
      state,
      query,
      backend_type ,
      backend_start ,
      backend_xid ,
      xact_start,
      query_start ,
      state_change,
      backend_xmin
    from pg_stat_activity
    where state <> 'idle'
    and pid <> pg_backend_pid();
    
--ATRASO NA REPLICAÇÃO
     select
      NOW(),
      pg_size_pretty(pg_wal_lsn_diff(pg_current_wal_lsn(), sent_lsn)) as sent_lag_size,
      pg_size_pretty(pg_wal_lsn_diff(pg_current_wal_lsn(), replay_lsn)) as replay_lag_size,
      replay_lag,
      write_lag,
      flush_lag ,
      *
    from pg_stat_replication;
